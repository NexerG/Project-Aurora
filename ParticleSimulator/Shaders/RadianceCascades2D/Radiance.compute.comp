#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 16, local_size_y = 16) in;

struct PD
{
	int cascade;
	int rayCount;
	int rayLength;
	int rayOffset;
	ivec2 probeCount;
	ivec2 probeDist;
	ivec2 offset;
};

layout(binding = 0, rgba8) uniform image2D outputImage;
layout(binding = 1, rgba8) uniform image2D lightDataImage;

layout(binding = 2, scalar) uniform MouseData{
    vec4 color;
    ivec2 mousePos;
    bool isLMBDown;
    bool isRMBDown;
} md;
layout(binding = 3, scalar) buffer ProbeData{
    PD data[];
} probes;

layout(set = 0, binding = 4, rgba8) uniform image2D probeTexels[];


vec4 Luminosity(ivec2 pos)
{
    vec4 luminosity = vec4(0.0f);

    int cascadeIndex = 0;
    PD pd = probes.data[cascadeIndex];
    while(pd.rayCount > 0)
    {
        ivec2 probeIndex = ivec2(round((vec2(pos) / vec2(pd.probeDist)) - pd.offset));
        ivec2 texel = ivec2(probeIndex * sqrt(pd.rayCount));

        int levels = int(pow(2, pd.cascade + 1));
        vec4 cl = vec4(0.0f);
        for(int vertical = 0; vertical < levels; vertical++)
        {
            for(int horizontal = 0; horizontal < levels; horizontal++)
            {
                cl += imageLoad(probeTexels[cascadeIndex], texel + ivec2(horizontal, vertical));
            }
        }
        luminosity += (cl / pd.rayCount);
    
        cascadeIndex++;
        pd = probes.data[cascadeIndex];
    }

    return luminosity;
}


void main()
{
    // probes
    ivec2 center = imageSize(outputImage) / 2;

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    int tileSize = 64; // Each large tile is 64x64 pixels
    int subTileSize = tileSize / 4; // Each small tile is 16x16 pixels

    // Compute tile indices
    int tileX = pos.x / tileSize;
    int tileY = pos.y / tileSize;
    
    // Compute position within the current tile
    int localX = pos.x % tileSize;
    int localY = pos.y % tileSize;

    // Black border thickness
    int borderThickness = 1;

    // check if we're drawing (LMB = true) or deleting (RMB = true)
    int brushSize = 5; // Increase this for a larger brush
    if(md.isLMBDown)
    {
        for (int dx = -brushSize; dx <= brushSize; dx++)
        {
            for (int dy = -brushSize; dy <= brushSize; dy++)
            {
                ivec2 brushPos = md.mousePos + ivec2(dx, dy);
                if (length(vec2(dx, dy)) <= brushSize) // Circular brush effect
                {
                    imageStore(lightDataImage, brushPos, md.color);
                }
            }
        }
    }

    vec4 RMBColor = vec4(0);
    if(md.isRMBDown)
    {
        for (int dx = -brushSize; dx <= brushSize; dx++)
        {
            for (int dy = -brushSize; dy <= brushSize; dy++)
            {
                ivec2 brushPos = md.mousePos + ivec2(dx, dy);
                if (length(vec2(dx, dy)) <= brushSize) // Circular brush effect
                {
                    imageStore(lightDataImage, brushPos, RMBColor);
                }
            }
        }
    }

    vec4 mpc = imageLoad(lightDataImage, pos);
    if(length(mpc) > 0)
    {
        imageStore(outputImage, pos, mpc);
        return;
    }

    // Check if we're in the black border
    if (localX < borderThickness || localX >= tileSize - borderThickness ||
        localY < borderThickness || localY >= tileSize - borderThickness) {
        imageStore(outputImage, pos, vec4(0.0, 0.0, 0.0, 1.0)); // Black edges
        return;
    }

    // Compute checkerboard pattern inside the tile
    int subTileX = (localX - borderThickness) / subTileSize;
    int subTileY = (localY - borderThickness) / subTileSize;
    bool isDarkBlue = (subTileX + subTileY) % 2 == 0;

    vec3 darkBlue1 = vec3(0, 0.08, 0.22); // Darker blue
    vec3 darkBlue2 = vec3(0, 0.14, 0.36); // Lighter blue

    // calc the luminosity of the pixel
    vec4 luminosity = Luminosity(pos);

    vec4 color = vec4(isDarkBlue ? darkBlue1 : darkBlue2, 1.0) * luminosity;
    imageStore(outputImage, pos, color);
    return;
}