#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct PD
{
	int cascade;
	int rayCount;
	int rayLength;
	int rayOffset;
	ivec2 probeCount;
	ivec2 probeDist;
	ivec2 offset;
};

layout(binding = 0, rgba8) uniform image2D lightImage;
layout(binding = 1, scalar) buffer ProbeData{
	PD data[];
} probes;


layout(set = 0, binding = 2, rgba8) uniform image2D probeImage[];
layout(set = 0, binding = 3, scalar) buffer ProbePositionData{
    ivec2 pos[];
} posData[];

struct Hit
{
	bool hit;
	vec2 location;
	float rayLuminosity;
};

struct Ray
{
	vec2 rayStart;
	float rayLength;
	vec2 rayDirection;
};

vec2 rotateVector(vec2 dir, float degrees) {
    float radians = radians(degrees);
    
    mat2 rotationMatrix = mat2(
        cos(radians), -sin(radians),
        sin(radians),  cos(radians)
    );
    
    vec2 rotatedVector = rotationMatrix * dir;
    
    return rotatedVector;
}

Hit raycast(Ray ray)
{
	Hit hit;
	vec2 pos = ray.rayStart;
	hit.rayLuminosity = 0.0f;

	ivec2 size = imageSize(lightImage);

	for(int i = 0; i < ray.rayLength; i++)
	{
		pos += ray.rayDirection;
		if(pos.x >= size.x || pos.y >= size.y || pos.x == 0 || pos.y == 0)
		{
			break;
		}

		vec4 data = imageLoad(lightImage, ivec2(pos));
		if(length(data) > 0)
		{
			hit.hit = true;
			hit.location = pos;
			hit.rayLuminosity = 1.0f;
			break;
		}
	}
	return hit;
}

void main()
{
	PD layer = probes.data[gl_WorkGroupID.z];

	int totalProbes = layer.probeCount.x * layer.probeCount.y;
	if(totalProbes <= gl_WorkGroupID.x)
	{
		return;
	}
	if (layer.rayCount <= gl_WorkGroupID.y)
	{
		return;
	}


	int probeX = int((int(gl_WorkGroupID.x) % layer.probeCount.x) * pow(2, (layer.cascade + 1)));
	int probeY = int((int(gl_WorkGroupID.x) / layer.probeCount.x) * pow(2, (layer.cascade + 1)));

	Ray ray;
	ray.rayStart = posData[gl_WorkGroupID.z].pos[gl_WorkGroupID.x];
	ray.rayLength = layer.rayLength;

	vec2 dir = vec2(0.0f, -1.0f);
	float x = (360.0f / float(layer.rayCount)) * gl_WorkGroupID.y;
	float rot = 45.0f / (gl_WorkGroupID.z + 1) + x;

	dir = rotateVector(dir, -rot);

	ray.rayDirection = normalize(dir);
	Hit hit = raycast(ray);

	int rc = int(sqrt(layer.rayCount));
	ivec2 texel = ivec2(probeX + (gl_WorkGroupID.y % rc), probeY + (gl_WorkGroupID.y / rc));
	vec4 lumen = vec4(hit.rayLuminosity, hit.rayLuminosity, hit.rayLuminosity, 1);

	imageStore(probeImage[gl_WorkGroupID.z], texel, lumen);
	return;
}