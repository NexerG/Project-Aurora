#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct PD
{
	int cascade;
	int rayCount;
	int rayLength;
	int rayOffset;
	ivec2 probeCount;
	ivec2 probeDist;
	vec2 offset;
    float importance;
    float padding;
};

layout(binding = 0, rgba8) uniform image2D lightImage; // ONLY USED FOR DEBUG
layout(binding = 1, scalar) buffer ProbeData{
	PD data[];
} probes;


layout(set = 0, binding = 2, rgba16f) uniform image2D probeImage[];
layout(set = 0, binding = 3, scalar) buffer ProbePositionData{
    ivec2 pos[];
} posData[];

layout(set = 0, binding = 4, rgba8) uniform image2D layeredLight[];
layout(set = 0, binding = 5, rgba8) uniform image2D layeredEmit[];

layout(push_constant) uniform PC{
	int currentLayer;
} pc;

struct Hit
{
	bool hit;
	vec2 location;
	float rayLuminosity;
	vec3 lightColor;
};

struct Ray
{
	vec2 rayStart;
	float rayLength;
	vec2 rayDirection;
};

vec2 rotateVector(vec2 dir, float degrees) {
    float radians = radians(degrees);
    
    mat2 rotationMatrix = mat2(
        cos(radians), -sin(radians),
        sin(radians),  cos(radians)
    );
    
    vec2 rotatedVector = rotationMatrix * dir;
    
    return rotatedVector;
}

Hit raycastLightLayer(Ray ray)
{
	Hit hit;
	vec2 pos = ray.rayStart;
	hit.rayLuminosity = 0.0f;
	hit.lightColor = vec3(0.0f);

	ivec2 size = imageSize(layeredLight[pc.currentLayer]);

	for(int i = 0; i < ray.rayLength; i++)
	{
		pos += ray.rayDirection;
		if(pos.x >= size.x || pos.y >= size.y || pos.x == 0 || pos.y == 0)
		{
			continue;
		}

		vec4 data = imageLoad(layeredLight[pc.currentLayer], ivec2(pos));
		if(data.w > hit.rayLuminosity)
		{
			hit.hit = true;
			hit.location = pos;
			hit.rayLuminosity = data.w;
			//hit.lightColor = data.rgb;
			//break;
		}
		if(data.w > 0)
		{
			hit.lightColor += data.rgb;
		}
	}
	//float maxRG = max(hit.lightColor.r, hit.lightColor.b);
	//float maxRGB = max(maxRG, hit.lightColor.g);
	//hit.lightColor /= maxRGB;
	
	return hit;
}

Hit raycastEmitLayer(Ray ray)
{
	Hit hit;
	vec2 pos = ray.rayStart;
	hit.rayLuminosity = 0.0f;
	hit.lightColor = vec3(0.0f);

	ivec2 size = imageSize(layeredEmit[pc.currentLayer]);

	for(int i = 0; i < ray.rayLength; i++)
	{
		pos += ray.rayDirection;
		if(pos.x >= size.x || pos.y >= size.y || pos.x == 0 || pos.y == 0)
		{
			continue;
		}

		vec4 data = imageLoad(layeredEmit[pc.currentLayer], ivec2(pos));
		if(data.w > hit.rayLuminosity)
		{
			hit.hit = true;
			hit.location = pos;
			hit.rayLuminosity = data.w;
			//hit.lightColor = data.rgb;
			//break;
		}
		if(data.w > 0)
		{
			hit.lightColor += data.rgb;
		}
	}

	//float maxRG = max(hit.lightColor.r, hit.lightColor.b);
	//float maxRGB = max(maxRG, hit.lightColor.g);
	//hit.lightColor /= maxRGB;

	return hit;
}

void main()
{
	PD layer = probes.data[gl_WorkGroupID.z];

	int totalProbes = layer.probeCount.x * layer.probeCount.y;
	if(totalProbes <= gl_WorkGroupID.x)
	{
		return;
	}
	if (layer.rayCount <= gl_WorkGroupID.y)
	{
		return;
	}
	
	//if(gl_WorkGroupID.z != 3)
	//{
	//	int brushSize = 5; // Increase this for a larger brush
    //    for (int dx = -brushSize; dx <= brushSize; dx++)
    //    {
    //        for (int dy = -brushSize; dy <= brushSize; dy++)
    //        {
    //            ivec2 brushPos = posData[gl_WorkGroupID.z].pos[gl_WorkGroupID.x] + ivec2(dx, dy);
    //            if (length(vec2(dx, dy)) <= brushSize) // Circular brush effect
    //            {
    //                imageStore(lightImage, brushPos, vec4(1.0f));
    //            }
    //        }
    //    }
	//}


	int probeX = int((int(gl_WorkGroupID.x) % layer.probeCount.x) * pow(2, (layer.cascade + 1)));
	int probeY = int((int(gl_WorkGroupID.x) / layer.probeCount.x) * pow(2, (layer.cascade + 1)));

	Ray rayReflective;
	rayReflective.rayStart = posData[gl_WorkGroupID.z].pos[gl_WorkGroupID.x];
	rayReflective.rayLength = layer.rayLength;

	vec2 dir = vec2(0.0f, -1.0f);
	float x = (360.0f / float(layer.rayCount)) * gl_WorkGroupID.y;
	float rot = 45.0f / (gl_WorkGroupID.z + 1) + x;

	dir = rotateVector(dir, -rot);

	rayReflective.rayDirection = normalize(dir);
	Hit hitLights = raycastLightLayer(rayReflective);

	Ray rayEmissive;
	rayEmissive.rayStart = posData[gl_WorkGroupID.z].pos[gl_WorkGroupID.x];
	rayEmissive.rayLength = layer.rayLength;
	rayEmissive.rayDirection = normalize(dir);
	Hit hitEmissive = raycastEmitLayer(rayEmissive);

	int rc = int(sqrt(layer.rayCount));
	ivec2 texel = ivec2(probeX + (gl_WorkGroupID.y % rc), probeY + (gl_WorkGroupID.y / rc));
	
	vec3 finalColor = hitLights.lightColor + hitEmissive.lightColor;
	float maxRG = max(finalColor.r, finalColor.g);
	float maxRGB = max(maxRG, finalColor.b);
	finalColor /= maxRGB;

	vec4 lumen = vec4(finalColor.rgb, hitLights.rayLuminosity + hitEmissive.rayLuminosity);

	imageStore(probeImage[gl_WorkGroupID.z], texel, lumen);
	return;
}