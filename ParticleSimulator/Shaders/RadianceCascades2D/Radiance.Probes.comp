#version 450
#extension GL_EXT_scalar_block_layout : enable

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0, rgba8) uniform image2D probeImage;
layout(binding = 1, rgba8) uniform image2D lightImage;
layout(binding = 2, scalar) buffer ProbeData{
	int cascade;
	int rayCount;
	int rayLength;
	int rayOffset;
	ivec2 probeCount;
	ivec2 probeDist;
	ivec2 offset;
} probes;

layout(binding = 3, scalar) buffer ProbePositionData{
    ivec2 pos[];
} posData;


vec2 directions[4] = vec2[4](
    vec2(1, 1),   // Up-Right
    vec2(1, -1),  // Right-Down
    vec2(-1, -1), // Bottom-Left
    vec2(-1, 1)   // Top-Left
);


struct Hit
{
	bool hit;
	vec2 location;
	float rayLuminosity;
};

struct Ray
{
	vec2 rayStart;
	float rayLength;
	vec2 rayDirection;
};

Hit raycast(Ray ray)
{
	Hit hit;
	vec2 pos = ray.rayStart;
	hit.rayLuminosity = 0.0f;

	ivec2 size = imageSize(lightImage);

	for(int i=0; i < ray.rayLength; i++)
	{
		pos += ray.rayDirection;
		if(pos.x >= size.x || pos.y >= size.y || pos.x == 0 || pos.y == 0)
		{
			break;
		}

		vec4 data = imageLoad(lightImage, ivec2(pos));
		if(length(data) > 0)
		{
			hit.hit = true;
			hit.location = pos;
			hit.rayLuminosity = 1.0f;
			break;
		}
	}
	return hit;
}

void main()
{
	int probeX = (int(gl_GlobalInvocationID.x) % probes.probeCount.x) * 2;
	int probeY = (int(gl_GlobalInvocationID.x) / probes.probeCount.x) * 2;

	Ray ray;
	ray.rayStart = posData.pos[gl_GlobalInvocationID.x];
	ray.rayLength = probes.rayLength;

	for(int vertical = 0; vertical < 2; vertical++)
	{
		for(int horizontal = 0; horizontal < 2; horizontal++)
		{
			ray.rayDirection = normalize(directions[vertical * 2 + horizontal]);
			Hit hit = raycast(ray);

			ivec2 texel = ivec2(probeX + horizontal, probeY + vertical);
			vec4 lumen = vec4(hit.rayLuminosity, hit.rayLuminosity, hit.rayLuminosity, 1);

			imageStore(probeImage, texel, lumen);
		}
	}
}